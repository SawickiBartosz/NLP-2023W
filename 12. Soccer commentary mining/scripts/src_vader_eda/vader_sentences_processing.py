import os
import json
import pandas as pd
import datetime
import nltk
import re

from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer


class Sentence():
    """
    Class for the main properites of the sentence/group of the sentences
    from audio transcriptions generated by Whisper
    Parameters:
        * segment - 'segment' key of the dictionary from one json file 
                    generated by Whisper
    Attributes:
        * text - the text of the sentiment
        * start_time - match second at the beginning of the sentence
        * end_time - match second at the end of the sentence
        * negative - negative intensity returned by Vader
        * positive - positive intensity returned by Vader
        * neutral - neutral intensity returned by Vader
        * compound - compound intensity returned by Vader
    """
    def __init__(self, segment):
        self.text = segment['text']
        self.start_time = segment['start']
        self.end_time = segment['end']
        self.negative = None
        self.positive = None
        self.neutral = None
        self.compound = None
        
    def extract_sentiment(self):
        """
        Method extracts the intensities of the sentiments with the application of Vader model
        """
        analyzer = SentimentIntensityAnalyzer()
        scores = analyzer.polarity_scores(self.text)
        self.negative = scores['neg']
        self.positive = scores['pos']
        self.neutral = scores['neu']
        self.compound = scores['compound']
        


class SentimentIntensityFromFile():
    """
    Class for gathering the information from the .json file with transcripts from one half of the match

    Attributes:
        * path (str) - path to the file (given as parameter)
        * filename (str) - name of the file (given as parameter)
        * folder_name (str) - name of the folder in which file is (on the basis of this name other information is gathered)
        * match_date (date) - date of the match
        * score (str) - final score of the match
        * host - the host team
        * guest - the guest team
        * original_language - the original language of the comments (non-english comments are tranlated into english)
        * file_content - dictionary from the json file
    """
    def __init__(self, filename, path):
        self.path = path
        self.filename = filename
        self.folder_name = os.path.split(path)[-1]
        self.match_date = datetime.date(int(self.folder_name[0:4]), int(self.folder_name[5:7]), 
                                        int(self.folder_name[8:10]))
        self.score = re.findall(r'\D+\s{1}(\d+\s{1}-\s{1}\d+)\s{1}\D+', self.folder_name)
        self.host = re.findall(r'\d{2}-\d{2}\s{1}(\w+)\s{1}', self.folder_name)
        self.guest = re.findall(r'\d+\s{1}(\w+)$', self.folder_name)
        self.original_language = None
        self.file_content = None
        self.sentences = None
        self.original_text = None # in case of analyzing the comments in other languages


    def load_json(self):
        """
        Method loads the .json file with the transcriptions and the parameters returned by Whisper model
        """
        with open(os.path.join(self.path,self.filename)) as f:
            self.file_content = json.load(f)
        self.original_language = self.file_content['language']

    
    def get_sentences(self):
        """
        Method extracts necessary information from the file with transcriptions
        """
        self.sentences = []
        self.start_time = []
        self.end_time = []

        if self.file_content==None:
            self.load_json()
        for segm in self.file_content['segments']:
            sentence_curr = Sentence(segm)
            self.sentences.append(sentence_curr)

    
    def get_sentiments_from_sentences(self):
        """
        Method extracts sentiments' intensity from all sentences from the file
        """
        if self.sentences==None:
            self.get_sentences()

        for sent in self.sentences:
            sent.extract_sentiment()


    def data_to_df(self):
        """
        Method gathers all extracted data and save it to the dataframe
        """
        if self.sentences == None:
            self.get_sentiments_from_sentences()

        start_time = []
        end_time = []
        sentences_text = []
        sentiment_positive = []
        sentiment_negative = []
        sentiment_neutral = []
        sentiment_compound = []

        for sent in self.sentences:
            start_time.append(sent.start_time)
            end_time.append(sent.end_time)
            sentences_text.append(sent.text)
            sentiment_positive.append(sent.positive)
            sentiment_negative.append(sent.negative)
            sentiment_neutral.append(sent.neutral)
            sentiment_compound.append(sent.compound)

        df = pd.DataFrame({'MATCH_FOLDER':self.folder_name, 'START_TIME':start_time,
                           'END_TIME':end_time, 'TEXT':sentences_text,
                           'POSITIVE':sentiment_positive,
                           'NEGATIVE':sentiment_negative,
                           'NEUTRAL':sentiment_neutral,
                           'COMPUND':sentiment_compound,
                           'LANGUAGE':self.original_language})
            
    